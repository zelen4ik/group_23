{
	"info": {
		"_postman_id": "a5156560-1a6e-4b73-b7a5-d1bbcdef56ef",
		"name": "02_HW_Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"pm.environment.set(\"My_name\", jsonData.name);\r",
							"pm.environment.set(\"My_age\", jsonData.age);\r",
							"pm.environment.set(\"My_salary\", jsonData.salary);\r",
							"\r",
							"var Name = pm.environment.get(\"My_name\");\r",
							"var Age = pm.environment.get(\"My_age\");\r",
							"var Salary = pm.environment.get(\"My_salary\");\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.expect(Name).to.equal(jsonData.name);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code age has string\", function () {\r",
							"    pm.expect(Age).to.equal(jsonData.age);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code salary has string\", function () {\r",
							"    pm.expect(Salary).to.equal(jsonData.salary);\r",
							"});\r",
							"\r",
							"var req_data = request.data;\r",
							"console.log(req_data);\r",
							"\r",
							"pm.test(\"Name from response is equal to specified name from POST request\", function(){\r",
							"   pm.expect(jsonData.name).to.eql(\"Yura\");\r",
							"});\r",
							"\r",
							"console.log(req_data.name);\r",
							"\r",
							"pm.test(\"Age from response is equal to specified name from POST request\", function(){\r",
							"   pm.expect(jsonData.age).to.eql('35');\r",
							"});\r",
							"\r",
							"pm.test(\"Salary from response is equal to specified name from POST request\", function(){\r",
							"   pm.expect(jsonData.salary).to.eql(1000);\r",
							"});\r",
							"\r",
							"console.log(req_data.salary);\r",
							"\r",
							"console.log(req_data.age);\r",
							"\r",
							"console.log(jsonData.family);\r",
							"\r",
							"pm.test(\"u_salary_1_5_year в ответе равно salary*4\", function(){\r",
							"   pm.expect(jsonData.family['u_salary_1_5_year']).to.eql(req_data.salary * 4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Yura",
							"type": "text"
						},
						{
							"key": "age",
							"value": "35",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "4000",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{url}}user_info_3",
					"host": [
						"{{url}}user_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Yura",
							"disabled": true
						},
						{
							"key": "age",
							"value": "35",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "2000",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Отправить запрос.\r",
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Спарсить response body в json.\r",
							"var resp_data = pm.response.json();\r",
							"// Спарсить request.\r",
							"var req_data = pm.request.url.query.toObject();\r",
							"console.log(\"+++++\",req_data.name);\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"// сравниваем между ожидаемым реквест и респонс\r",
							"pm.test(\"My test name\", function () {\r",
							"    pm.expect(req_data.name).to.eql(resp_data.name);\r",
							"});\r",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"// сравниваем между ожидаемым реквест и респонс\r",
							"pm.test(\"My test age\", function () {\r",
							"    pm.expect(req_data.age).to.eql(resp_data.age);\r",
							"});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"// сравниваем между ожидаемым реквест и респонс\r",
							"pm.test(\"My test salary\", function () {\r",
							"    pm.expect(+req_data.salary).to.eql(resp_data.salary);\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр family из response.\r",
							"console.log(\"Test family\",resp_data.family);\r",
							"// Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"My test dog name\", function () {\r",
							"    pm.expect(resp_data.family.pets.dog.name).exist;\r",
							"    console.log(\"====\",resp_data.family.pets.dog.name);\r",
							"});\r",
							"// Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"My test dog age\", function () {\r",
							"    pm.expect(resp_data.family.pets.dog.age).exist;\r",
							"    console.log(\"DOG age\",resp_data.family.pets.dog.age);\r",
							"});\r",
							"// Проверить, что параметр name имеет значение Luky.\r",
							"// для этого нужно понять что key = value, выводится expect().to.include()\r",
							"pm.test(\"My test name is Luky\", function () {\r",
							"    pm.expect(resp_data.family.pets.dog.name).to.include(\"Luky\");\r",
							"    console.log(\"My test key is name Luky\",resp_data.family.pets.dog.name);\r",
							"});\r",
							"// Проверить, что параметр age имеет значение 4\r",
							"pm.test(\"My test key is age 4\", function () {\r",
							"    pm.expect(resp_data.family.pets.dog.age).to.have.property+(4);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}object_info_3?name=Yura&age=35&salary=1000",
					"host": [
						"{{url}}object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Yura"
						},
						{
							"key": "age",
							"value": "35"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Отправить запрос.\r",
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Спарсить response body в json.\r",
							"var resp_data = pm.response.json();\r",
							"// Спарсить request.\r",
							"var req_data = pm.request.url.query.toObject();\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"My test name2\", function () {\r",
							"    pm.expect(req_data.name).to.eql(resp_data.name);\r",
							"});\r",
							"// Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"My test age2\", function () {\r",
							"    pm.expect(+req_data.age).to.eql(resp_data.age);\r",
							"});\r",
							"// Вывести в консоль параметр salary из request.\r",
							"console.log(\"Test salary1 =\",req_data.salary);\r",
							"// Вывести в консоль параметр salary из response.\r",
							"console.log(\"Test salary2 =\",resp_data.salary);\r",
							"// Вывести в консоль 0-й элемент параметра salary из response.\r",
							"pm.test(\"Вывести в консоль 0-й элемент параметра salary из response\", function () {\r",
							"    // pm.expect(resp_data.salary[0]).to.eql(+(req_data.salary[0]));\r",
							"    console.log(\"test0 ===\",resp_data.salary[0]);\r",
							"});\r",
							"// Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"pm.test(\"Вывести в консоль 1-й элемент параметра salary из response\", function () {\r",
							"    // pm.expect(resp_data.salary[0]).to.eql(+(req_data.salary[0]));\r",
							"    console.log(\"test1 ===\",resp_data.salary[1]);\r",
							"});\r",
							"// Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"pm.test(\"Вывести в консоль 2-й элемент параметра salary из response\", function () {\r",
							"    // pm.expect(resp_data.salary[0]).to.eql(+(req_data.salary[0]));\r",
							"    console.log(\"test2 ===\",resp_data.salary[2]);\r",
							"});\r",
							"// Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"// сравниваем между ожидаемым реквест и респонс \r",
							"pm.test(\"Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request\", function () {\r",
							"    pm.expect(resp_data.salary[0]).to.eql(+req_data.salary);\r",
							"});\r",
							"// Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Проверить, что 1-й элемент параметра salary равен salary из request (salary забрать из request\", function () {\r",
							"    pm.expect(+resp_data.salary[1]).to.eql(req_data.salary*2);\r",
							"});\r",
							"// Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Проверить, что 2-й элемент параметра salary равен salary из request (salary забрать из request\", function () {\r",
							"    pm.expect(+resp_data.salary[2]).to.eql(req_data.salary*3);\r",
							"});\r",
							"// Создать в окружении переменную name\r",
							"// Передать в окружение перемённую переменную name\r",
							"var jsonData = pm.response.json();\r",
							"pm.environment.set(\"My_test_name1\", jsonData.name);\r",
							"// Создать в окружении переменную age\r",
							"// Передать в окружение перемённую переменную age\r",
							"pm.environment.set(\"My_age1\", jsonData.age);\r",
							"// Создать в окружении переменную salary\r",
							"// Передать в окружение перемённую переменную salary\r",
							"pm.environment.set(\"My_salary1\", jsonData.salary);\r",
							"// Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"let salaryTest = [1000,2000,3000];\r",
							"console.log(\"lenght =\", salaryTest.length);\r",
							"// for (let zelen4ik of salaryTest) {\r",
							"//     console.log(\"item salaryTest zelen4ik =\", zelen4ik);\r",
							"// } это самый простой вариант\r",
							"for (let key = 0; key <= salaryTest.length; key++) {\r",
							"   console.log(\"Zelen4ik salary =\", salaryTest[key]); \r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Yura&age=35&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Yura"
						},
						{
							"key": "age",
							"value": "35"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request\r",
							"let testSalary = pm.environment.get(\"My_salary1\");\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"let testAge = pm.environment.get(\"My_age1\");\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"let testName = pm.environment.get(\"My_name1\");\r",
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 6. Спарсить response body в json.\r",
							"var resp_data = pm.response.json();\r",
							"// 7. Спарсить request.\r",
							"var req_data = request.data;\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"console.log(resp_data);\r",
							"pm.test(\"json response have parametr start_qa_salary\", function () {\r",
							"    pm.expect(resp_data[\"start_qa_salary\"]).to.equal(+req_data.salary);\r",
							"    console.log(\"Your test salary =\",resp_data.start_qa_salary);\r",
							"});\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"json response have parametr qa_salary_after_6_months\", function () {\r",
							"    pm.expect(resp_data[\"qa_salary_after_6_months\"]).to.equal(req_data.salary*2);\r",
							"    console.log(\"Your test salary*2 =\",resp_data.qa_salary_after_6_months);\r",
							"});\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"json response have parametr qa_salary_after_12_months\", function () {\r",
							"    pm.expect(resp_data[\"qa_salary_after_12_months\"]).to.equal(req_data.salary*2.7);\r",
							"    console.log(\"Your test salary*2.7 =\",resp_data.qa_salary_after_12_months);\r",
							"});\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"json response have parametr qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(resp_data[\"qa_salary_after_1.5_year\"]).to.equal(req_data.salary*3.3);\r",
							"    console.log(\"Your test salary*3.3 =\", resp_data[\"qa_salary_after_1.5_year\"]);\r",
							"});\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"json response have parametr qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(resp_data[\"qa_salary_after_3.5_years\"]).to.equal(req_data.salary*3.8);\r",
							"    console.log(\"Your test salary*3.8 =\", resp_data[\"qa_salary_after_3.5_years\"]);\r",
							"});\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"My test person\", function () {\r",
							"    pm.expect(resp_data.persone).to.eql(req_data.person);\r",
							"    // console.log(\"resp_data ====\",resp_data.person);\r",
							"});\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request)\", function () {\r",
							"    pm.expect(resp_data[\"start_qa_salary\"]).to.eql(+req_data.salary);\r",
							"});\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Проверить, что параметр qa_salary_after_6_months равен salary из request (salary забрать из request)\", function () {\r",
							"    pm.expect(resp_data[\"qa_salary_after_6_months\"]).to.eql(+req_data.salary*2);\r",
							"});\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"Проверить, что параметр qa_salary_after_12_months равен salary из request (salary забрать из request)\", function () {\r",
							"    pm.expect(resp_data[\"qa_salary_after_12_months\"]).to.eql(+req_data.salary*2.7);\r",
							"});\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"Проверить, что параметр qa_salary_after_1.5_year равен salary из request (salary забрать из request)\", function () {\r",
							"    pm.expect(resp_data[\"qa_salary_after_1.5_year\"]).to.eql(+req_data.salary*3.3);\r",
							"});\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"Проверить, что параметр qa_salary_after_3.5_years равен salary из request (salary забрать из request)\", function () {\r",
							"    pm.expect(resp_data[\"qa_salary_after_3.5_years\"]).to.eql(+req_data.salary*3.8);\r",
							"});\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request)\", function () {\r",
							"    pm.expect(resp_data.person.u_name[1]).to.eql(+req_data.salary);\r",
							"});\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"Проверить, что в параметре person, u_age равен age из request (age забрать из request)\", function () {\r",
							"    pm.expect(resp_data.person.u_age).to.eql(+req_data.age);\r",
							"});\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request)\", function () {\r",
							"    pm.expect(resp_data.person.u_salary_5_years).to.eql(+req_data.salary*4.2);\r",
							"});\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"const i = resp_data.person;\r",
							"// console.log(\"length\",resp_data.person);\r",
							"// for (let tim = 0; tim < resp_data.person; tim++) {\r",
							"//     console.log(\"tim test cycle =\", resp_data[tim]); \r",
							"// };\r",
							"for (let zelen4ik in i) {\r",
							"    console.log(\"test items of zele4ik =\",zelen4ik);\r",
							"    console.log(\"Your test items of zele4ik ===\", i[zelen4ik]);\r",
							"}; "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Yura",
							"type": "text"
						},
						{
							"key": "age",
							"value": "35",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}user_info_2",
					"host": [
						"{{url}}user_info_2"
					]
				}
			},
			"response": []
		}
	]
}
